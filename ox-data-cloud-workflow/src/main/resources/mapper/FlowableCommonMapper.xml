<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hnrc.flowable.mapper.FlowableCommonMapper">

    <select id="selectUserByQueryCriteria" parameterType="org.flowable.idm.engine.impl.UserQueryImpl"
            resultType="org.flowable.idm.engine.impl.persistence.entity.UserEntityImpl">
        SELECT
        t.user_id as id,
        t.nick_name as firstName,
        t.nick_name as lastName,
        t.nick_name as displayName,
        t.email as email
        <include refid="selectUserByQueryCriteriaSql"/>
    </select>

    <select id="selectUserCountByQueryCriteria" parameterType="org.flowable.idm.engine.impl.UserQueryImpl"
            resultType="long">
        select count(1)
        <include refid="selectUserByQueryCriteriaSql"/>
    </select>

    <sql id="selectUserByQueryCriteriaSql">
        FROM sys_user t
        WHERE 1=1
        <if test="id != null">
            and t.user_id = #{id}
        </if>
        <if test="ids != null &amp;&amp; ids.size() &gt; 0">
            and t.user_id IN
            <foreach item="id" index="index" collection="ids"
                     open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
        <if test="firstName != null">
            and t.nick_name = #{firstName}
        </if>
        <if test="firstNameLike != null">
            and t.nick_name like concat('%',#{firstNameLike},'%')
        </if>
    </sql>

    <select id="selectGroupByQueryCriteria" parameterType="org.flowable.idm.engine.impl.GroupQueryImpl"
            resultType="org.flowable.idm.engine.impl.persistence.entity.GroupEntityImpl">
        select r.role_id as id,
        r.role_name as name
        <include refid="selectGroupByQueryCriteriaSql"/>
    </select>

    <select id="selectGroupCountByQueryCriteria" parameterType="org.flowable.idm.engine.impl.GroupQueryImpl"
            resultType="org.flowable.idm.engine.impl.persistence.entity.GroupEntityImpl">
        select count(1)
        <include refid="selectGroupByQueryCriteriaSql"/>
    </select>

    <sql id="selectGroupByQueryCriteriaSql">
        from sys_role r
        where 1=1
        <if test="id != null">
            and r.role_id = #{id}
        </if>
        <if test="ids != null &amp;&amp; ids.size() &gt; 0">
            and r.role_id IN
            <foreach item="id" index="index" collection="ids"
                     open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
        <if test="name != null">
            and r.role_name = #{name}
        </if>
        <if test="nameLike != null">
            and r.role_name like concat('%',#{nameLike},'%')
        </if>
        <if test="userId != null and userId !=''">
            and r.role_id in (select role_id from sys_user_role where user_id = #{userId})
        </if>
    </sql>

    <select id="listMyInvolvedSummary" parameterType="com.hnrc.flowable.vo.query.ProcessInstanceQueryVo"
            resultType="com.hnrc.flowable.vo.ProcessDefinitionVo">
        SELECT
            DEF.CATEGORY_ as category,
            DEF.CATEGORY_ as categoryName,
            DEF.KEY_ as processDefinitionKey,
            DEF.NAME_ as processDefinitionName,
            count(1) as count
        FROM
            ACT_HI_PROCINST RES
        LEFT OUTER JOIN ACT_RE_PROCDEF DEF ON RES.PROC_DEF_ID_ = DEF.ID_
        WHERE
        (
            EXISTS (
                SELECT
                    LINK.USER_ID_
                FROM
                    ACT_HI_IDENTITYLINK LINK
                WHERE
                    USER_ID_ = #{userId}
                AND LINK.PROC_INST_ID_ = RES.ID_
            )
        )
        <if test="ccToMe">
            AND EXISTS (
                SELECT
                    ID_
                FROM ACT_HI_IDENTITYLINK I
                WHERE I.PROC_INST_ID_ = RES.ID_
                    AND I.USER_ID_ = #{userId}
                    AND I.TYPE_ = 'CC'
            )
        </if>

        <if test="startedByMe">
            AND RES.START_USER_ID_ = #{userId}
        </if>
        <if test="unfinished != finished">
            <if test="unfinished">
                AND RES.END_TIME_ IS NULL
            </if>
            <if test="finished">
                AND RES.END_TIME_ IS NOT NULL
            </if>
        </if>
        GROUP BY
            DEF.CATEGORY_,DEF.KEY_,DEF.NAME_
        ORDER BY
            DEF.CATEGORY_,DEF.KEY_
    </select>


</mapper>
